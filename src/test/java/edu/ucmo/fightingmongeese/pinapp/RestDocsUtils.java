package edu.ucmo.fightingmongeese.pinapp;

import edu.ucmo.fightingmongeese.pinapp.models.Pin;
import org.springframework.restdocs.constraints.ConstraintDescriptions;
import org.springframework.restdocs.constraints.ResourceBundleConstraintDescriptionResolver;
import org.springframework.restdocs.payload.FieldDescriptor;
import org.springframework.restdocs.payload.PayloadDocumentation;

import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.StringJoiner;

public class RestDocsUtils {


    private static <T> String getConstraints(Class<T> clazz, String property) {
        ConstraintDescriptions userConstraints = new ConstraintDescriptions(clazz,
                new ResourceBundleConstraintDescriptionResolver(ResourceBundle.getBundle("ValidationMessages",
                        Locale.getDefault(), Thread.currentThread().getContextClassLoader())));
        List<String> descriptions = userConstraints.descriptionsForProperty(property);

        StringJoiner stringJoiner = new StringJoiner(". ", "", ".");
        descriptions.forEach(stringJoiner::add);
        return stringJoiner.toString();
    }

    static FieldDescriptor[] addPinDescriptors() {
        return new FieldDescriptor[]{
                PayloadDocumentation.fieldWithPath("create_user")
                        .description("The user of the account creating the PIN. " + getConstraints(Pin.class, "create_user")),
                PayloadDocumentation.fieldWithPath("account")
                        .description("The account associated with the PIN." + getConstraints(Pin.class, "account"))
        };
    }

    static FieldDescriptor[] claimPinDescriptors() {
        return new FieldDescriptor[]{
                PayloadDocumentation.fieldWithPath("claim_user")
                        .description("The user who wishes to claim PIN. " + getConstraints(Pin.class, "claim_user")),
                PayloadDocumentation.fieldWithPath("pin")
                        .description("The pin the user is attempting to claim. " + getConstraints(Pin.class, "pin"))
        };
    }

    static FieldDescriptor[] cancelPinDescriptors() {
        return new FieldDescriptor[]{
                PayloadDocumentation.fieldWithPath("claim_user")
                        .description("Must be equal to the user who created the PIN to cancel. " + getConstraints(Pin.class, "claim_user")),
                PayloadDocumentation.fieldWithPath("pin")
                        .description("The pin the user is attempting to cancel. " + getConstraints(Pin.class, "pin")),
                PayloadDocumentation.fieldWithPath("account")
                        .description("The account associated with the PIN. " + getConstraints(Pin.class, "pin"))
        };
    }

    static FieldDescriptor[] addPinResponseDescriptors() {
        return new FieldDescriptor[]{
                PayloadDocumentation.fieldWithPath("oid")
                        .description("Unique ID generated by database."),
                PayloadDocumentation.fieldWithPath("account")
                        .description("The account associated with the PIN."),
                PayloadDocumentation.fieldWithPath("pin")
                        .description("The randomly generated PIN"),
                PayloadDocumentation.fieldWithPath("create_ip")
                        .description("The IP address of the request"),
                PayloadDocumentation.fieldWithPath("create_user")
                        .description("The user of the account creating the PIN."),
                PayloadDocumentation.fieldWithPath("create_timestamp")
                        .description("The time the request was received. Passed as an array"),
                PayloadDocumentation.fieldWithPath("expire_timestamp")
                        .description("The time the PIN will expire. Passed as an array"),
                PayloadDocumentation.fieldWithPath("claim_user")
                        .description("The user who claimed the PIN.  Property is null when PIN is created"),
                PayloadDocumentation.fieldWithPath("expire_timestamp")
                        .description("The time the claim was made.  Property is null when PIN is created"),
                PayloadDocumentation.fieldWithPath("claim_ip")
                        .description("The IP address of the claim user.  Property is null when PIN is created"),

        };
    }

    static FieldDescriptor[] claimPinResponseDescriptors() {
        return new FieldDescriptor[]{
                PayloadDocumentation.fieldWithPath("oid")
                        .description("Unique ID generated by database."),
                PayloadDocumentation.fieldWithPath("account")
                        .description("The account associated with the PIN."),
                PayloadDocumentation.fieldWithPath("pin")
                        .description("The randomly generated PIN"),
                PayloadDocumentation.fieldWithPath("create_ip")
                        .description("The IP address of the request"),
                PayloadDocumentation.fieldWithPath("create_user")
                        .description("The user of the account creating the PIN."),
                PayloadDocumentation.fieldWithPath("create_timestamp")
                        .description("The time the request was received. Passed as an array"),
                PayloadDocumentation.fieldWithPath("expire_timestamp")
                        .description("The time the PIN will expire. Passed as an array"),
                PayloadDocumentation.fieldWithPath("claim_user")
                        .description("The user who claimed the PIN."),
                PayloadDocumentation.fieldWithPath("expire_timestamp")
                        .description("The time the claim was made."),
                PayloadDocumentation.fieldWithPath("claim_ip")
                        .description("The IP address of the claim user."),
                PayloadDocumentation.fieldWithPath("claim_timestamp")
                        .description("The timestamp of when PIN was claimed"),

        };
    }
}
